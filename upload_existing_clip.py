#!/usr/bin/env python3
"""
Script per caricare una clip esistente su YouTube
"""

import os
import sys
import sqlite3
from datetime import datetime, timezone

# Aggiungi la directory corrente al path per importare i moduli
current_dir = os.path.dirname(os.path.abspath(__file__))
sys.path.insert(0, current_dir)

from upload.youtube_uploader import YouTubeUploader
from database import Database

def upload_existing_clip():
    """Carica una clip esistente su YouTube"""
    
    # File video da caricare
    video_file = "data/processed/1n091iPQ3uA_clip_30s.mp4"
    
    # Verifica che il file esista
    if not os.path.exists(video_file):
        print(f"❌ File video non trovato: {video_file}")
        return False
    
    print(f"📹 File video trovato: {video_file}")
    print(f"📊 Dimensione file: {os.path.getsize(video_file)} bytes")
    
    try:
        # Inizializza database
        db = Database('data/viral_shorts.db')
        
        # Ottieni informazioni dal database
        conn = sqlite3.connect('data/viral_shorts.db')
        cursor = conn.cursor()
        
        # Trova il source video
        cursor.execute("SELECT * FROM source_videos WHERE youtube_id = '1n091iPQ3uA'")
        source_video = cursor.fetchone()
        
        if not source_video:
            print("❌ Video sorgente non trovato nel database")
            return False
        
        # Costruisci i dati del video sorgente per i credits
        source_video_data = {
            'channel_title': source_video[3],  # channel field
            'metadata': source_video[12]  # metadata JSON field
        }
        
        print(f"🎬 Video sorgente: {source_video[2]} - {source_video[3]}")
        print(f"📋 Metadati disponibili: {source_video[12][:100]}..." if source_video[12] else "📋 Nessun metadato")
        
        # Inizializza YouTube uploader
        print("🔄 Inizializzazione YouTube uploader...")
        import json
        with open('config.json', 'r') as f:
            config = json.load(f)
        uploader = YouTubeUploader(config)
        
        # Prepara metadati per il caricamento
        title = "🎬 THE LAST OF US MAKEUP TUTORIAL #shorts #makeup #viral"
        description = """🔥 Amazing makeup transformation tutorial from The Last of Us! 

✨ Follow for more viral content!

#shorts #makeup #tutorial #transformation #thelastofus #viral #trending #beauty #makeuptutorial #fyp

Generated by ViralShortsAI 🤖"""

        tags = ["shorts", "makeup", "tutorial", "transformation", "viral", "trending", "beauty", "thelastofus"]
        
        print(f"📝 Titolo: {title}")
        print(f"📄 Descrizione pronta")
        print(f"🏷️ Tags: {', '.join(tags)}")
        
        # Carica il video su YouTube
        print("\n🚀 Avvio caricamento su YouTube...")
        print("⏳ Questo potrebbe richiedere alcuni minuti...")
        
        youtube_video_id = uploader.upload_video(
            video_path=video_file,
            title=title,
            description=description,
            tags=tags,
            category_id=22,  # People & Blogs
            visibility='public',
            source_video_data=source_video_data
        )
        
        if youtube_video_id:
            print(f"\n🎉 VIDEO CARICATO CON SUCCESSO!")
            print(f"🆔 YouTube Video ID: {youtube_video_id}")
            print(f"🔗 URL: https://www.youtube.com/watch?v={youtube_video_id}")
            print(f"📱 URL Shorts: https://www.youtube.com/shorts/{youtube_video_id}")
            
            # Salva nel database
            cursor.execute('''
                INSERT INTO uploaded_videos 
                (clip_id, youtube_id, title, description, hashtags, upload_time, visibility, url)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?)
            ''', (
                None,  # clip_id (non abbiamo l'ID della clip processata)
                youtube_video_id['youtube_id'],
                title,
                description,
                ', '.join(tags),
                datetime.now(timezone.utc).isoformat(),
                'public',
                youtube_video_id['url']
            ))
            
            conn.commit()
            print("💾 Informazioni salvate nel database")
            
            return True
        else:
            print("❌ Errore durante il caricamento")
            return False
            
    except Exception as e:
        print(f"❌ Errore durante il caricamento: {str(e)}")
        import traceback
        traceback.print_exc()
        return False
    finally:
        if 'conn' in locals():
            conn.close()

if __name__ == "__main__":
    print("=" * 60)
    print("🎬 VIRAL SHORTS AI - CARICAMENTO VIDEO SU YOUTUBE")
    print("=" * 60)
    
    success = upload_existing_clip()
    
    if success:
        print("\n✅ PROCESSO COMPLETATO CON SUCCESSO!")
        print("🎯 Il tuo primo video AI è ora live su YouTube!")
    else:
        print("\n❌ PROCESSO FALLITO")
        print("🔧 Controlla i log per i dettagli dell'errore")
